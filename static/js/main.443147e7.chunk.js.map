{"version":3,"sources":["components/custom-button/custom-button.component.js","assets/cards.data.js","components/card/card.component.js","components/victory/victory.component.js","components/background-music/background-music.component.js","App.js","reportWebVitals.js","index.js"],"names":["CustomButton","children","handleClick","onClick","className","cardsArray","type","image","Card","card","handleChoice","isFlipped","disabled","alt","src","Victory","BackgroundMusic","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","addEventListener","removeEventListener","App","cards","setCards","turns","setTurns","firstCard","setFirstCard","secondCard","setSecondCard","setDisabled","gameWon","setGameWon","prevCards","map","matched","setTimeout","resetTurn","endGame","prevTurns","length","every","shuffledCards","sort","Math","random","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.443147e7.chunk.js","sourcesContent":["import './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({ children, handleClick }) => {\r\n    return (\r\n        <button onClick={ handleClick } className='custom-button'>{ children }</button>\r\n    );\r\n}\r\n\r\nexport default CustomButton;","const cardsArray = [\r\n    {\r\n      type: \"tree\",\r\n      image: 'cards/tree.png'\r\n    },\r\n    {\r\n      type: \"candle\",\r\n      image: 'cards/candle.png'\r\n    },\r\n    {\r\n      type: \"hat\",\r\n      image: 'cards/hat.png'\r\n    },\r\n    {\r\n      type: \"ornament\",\r\n      image: 'cards/ornament.png'\r\n    },\r\n    {\r\n      type: \"present\",\r\n      image: 'cards/present.png'\r\n    },\r\n    {\r\n      type: \"snowman\",\r\n      image: 'cards/snowman.png'\r\n    },\r\n    {\r\n      type: \"bell\",\r\n      image: 'cards/bell.png'\r\n    },\r\n    {\r\n      type: \"lollipop\",\r\n      image: 'cards/lollipop.png'\r\n    }\r\n  ];\r\n\r\n  export default cardsArray;","import './card.styles.scss';\r\n\r\nconst Card = ({ card, handleChoice, isFlipped, disabled }) => {\r\n\r\n    const { image } = card\r\n    return (\r\n        <div className={isFlipped ? \"card flipped\" : \"card\"}>\r\n            <img\r\n                className='card-front'\r\n                alt=\"front\"\r\n                src={image}\r\n            />\r\n            <img\r\n                className='card-back'\r\n                alt=\"back\"\r\n                onClick={() => !disabled && handleChoice(card)}\r\n                src=\"cards/cardback.jpg\"\r\n            />\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import './victory.styles.scss';\r\n\r\nconst Victory = () => {\r\n    return ( \r\n        <div>\r\n            <img alt=\"reindeer\" src='reindeer.gif' />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Victory;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst BackgroundMusic = ({url}) => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const toggle = () => setPlaying(!playing);\r\n\r\n    useEffect(() => {\r\n        playing ? audio.play() : audio.pause();\r\n    },\r\n        [audio, playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, [audio]);\r\n\r\n    return (\r\n        <div>\r\n            <img src=\"assets/mute.png\" alt=\"sound\" />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default BackgroundMusic;","import './App.scss';\nimport CustomButton from './components/custom-button/custom-button.component';\nimport { useEffect, useState } from \"react\";\nimport cardsArray from './assets/cards.data';\nimport Card from './components/card/card.component';\nimport Victory from './components/victory/victory.component';\nimport BackgroundMusic from './components/background-music/background-music.component';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0)\n  const [firstCard, setFirstCard] = useState(null)\n  const [secondCard, setSecondCard] = useState(null)\n  const [disabled, setDisabled] = useState(false)\n  const [gameWon, setGameWon] = useState(false)\n\n\n  const shuffleCards = () => {\n    setGameWon(false)\n    const shuffledCards = [...cardsArray, ...cardsArray] //duplicate items\n      .sort(() => Math.random() - 0.5)  // negative => switch order, positive => do nothing\n      .map(card => ({ ...card, matched: false, id: Math.random() })) // assign a random id\n\n    setCards(shuffledCards)\n    setTurns(0) //everytime we start a new game we call this function and reset turns\n  }\n\n  const handleChoice = (card) => {\n    firstCard ? setSecondCard(card) : setFirstCard(card)\n  }\n\n  //fires when firstCard or secondCard change and when the component mounts\n  useEffect(() => {\n    if (secondCard) {\n      setDisabled(true)\n      if (firstCard.type === secondCard.type) {\n        setCards(prevCards => (\n          prevCards.map(card => (\n            card.type === secondCard.type ? { ...card, matched: true } : card\n          ))\n        ))\n      }\n      setTimeout(()=>resetTurn(), 1000) \n    }\n\n    if(secondCard === null) endGame()\n  }, [secondCard])\n\n  //reset chosen cards and increment number of turns\n  const resetTurn = () => {\n    setFirstCard(null)\n    setSecondCard(null)\n    setTurns(prevTurns => prevTurns + 1)\n    setDisabled(false)\n  }\n\n  const endGame = () => {\n    if(cards.length > 0){\n      const gameOver = cards.every((card)=>(\n        card.matched === true\n      ))\n      if( gameOver ) {\n        setGameWon(true)\n        setCards([])\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n\n     <div className=\"snow layer1 a\"></div>\n     <div className=\"snow layer1\"></div> \n     <div className=\"snow layer2 a\"></div>\n     <div className=\"snow layer2\"></div>\n     <div className=\"snow layer3 a\"></div>\n     <div className=\"snow layer3\"></div>\n\n      <h1 className='title'>Memory Game</h1>\n      <CustomButton handleClick={shuffleCards}>New game</CustomButton>\n      <h2 className='subtitle'> Turns: {turns} </h2>\n      {\n        gameWon && <Victory />\n      }\n      <BackgroundMusic url=\"https://play.publicradio.org/web/o/minnesota/classical/programs/free-downloads/2018/10/18/daily_download_20181018_128.mp3\" />\n      <div className='card-container'>\n        {\n          cards.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              handleChoice={handleChoice}\n              isFlipped={card === firstCard || card === secondCard || card.matched}\n              disabled={disabled}\n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}