{"version":3,"sources":["components/custom-button/custom-button.component.js","assets/cards.data.js","components/card/card.component.js","components/victory/victory.component.js","components/background-music/background-music.component.js","redux/game/constants.js","App.js","redux/game/game.actions.js","redux/game/game.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["CustomButton","children","handleClick","onClick","className","cardsArray","type","image","Card","card","handleChoice","isFlipped","disabled","alt","src","Victory","BackgroundMusic","url","useState","Audio","audio","playing","setPlaying","useEffect","play","pause","autoplay","addEventListener","removeEventListener","GameActionTypes","SET_CARDS","INCREMENT_TURNS","SET_FIRST_CARD","SET_SECOND_CARD","TOGGLE_DISABLED","SET_GAME_WON","RESET_TURNS","connect","game","cards","turns","firstCard","secondCard","gameWon","dispatch","setCards","payload","incrementTurns","setFirstCard","setSecondCard","toggleDisabled","setGameWon","resetTurns","prevCards","map","matched","setTimeout","resetTurn","endGame","length","every","shuffledCards","sort","Math","random","id","INITIAL_STATE","gameReducer","state","action","TOGGLE_GAME_WON","combineReducers","require","createStore","applyMiddleware","middlewares","logger","store","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67c5490f.chunk.js","sourcesContent":["import './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({ children, handleClick }) => {\r\n    return (\r\n        <button onClick={ handleClick } className='custom-button'>{ children }</button>\r\n    );\r\n}\r\n\r\nexport default CustomButton;","const cardsArray = [\r\n    {\r\n      type: \"tree\",\r\n      image: 'cards/tree.png'\r\n    },\r\n    {\r\n      type: \"candle\",\r\n      image: 'cards/candle.png'\r\n    },\r\n    {\r\n      type: \"hat\",\r\n      image: 'cards/hat.png'\r\n    },\r\n    {\r\n      type: \"ornament\",\r\n      image: 'cards/ornament.png'\r\n    },\r\n    {\r\n      type: \"present\",\r\n      image: 'cards/present.png'\r\n    },\r\n    {\r\n      type: \"snowman\",\r\n      image: 'cards/snowman.png'\r\n    },\r\n    {\r\n      type: \"bell\",\r\n      image: 'cards/bell.png'\r\n    },\r\n    {\r\n      type: \"lollipop\",\r\n      image: 'cards/lollipop.png'\r\n    }\r\n  ];\r\n\r\n  export default cardsArray;","import './card.styles.scss';\r\n\r\nconst Card = ({ card, handleChoice, isFlipped, disabled }) => {\r\n\r\n    const { image } = card\r\n    return (\r\n        <div className={isFlipped ? \"card flipped\" : \"card\"}>\r\n            <img\r\n                className='card-front'\r\n                alt=\"front\"\r\n                src={image}\r\n            />\r\n            <img\r\n                className='card-back'\r\n                alt=\"back\"\r\n                onClick={() => !disabled && handleChoice(card)}\r\n                src=\"cards/cardback.jpg\"\r\n            />\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import './victory.styles.scss';\r\n\r\nconst Victory = () => {\r\n    return ( \r\n        <div>\r\n            <img alt=\"reindeer\" src='reindeer.gif' />\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Victory;","import React, { useState, useEffect } from \"react\";\r\nimport './background-music.styles.scss';\r\n\r\nconst BackgroundMusic = ({url}) => {\r\n    const [audio] = useState(new Audio(url));\r\n    const [playing, setPlaying] = useState(false);\r\n\r\n    const toggle = () => setPlaying(!playing);\r\n\r\n    useEffect(() => {\r\n        playing ? audio.play() : audio.pause();\r\n    },\r\n        [audio, playing]\r\n    );\r\n\r\n    useEffect(() => {\r\n        audio.autoplay = true\r\n        audio.addEventListener('ended', () => setPlaying(false));\r\n        return () => {\r\n            audio.removeEventListener('ended', () => setPlaying(false));\r\n        };\r\n    }, [audio]);\r\n\r\n    return (\r\n        <div className=\"sound-toggle\">\r\n            <img className=\"sound-toggle-image\" onClick={toggle} src={`sound/${playing ? \"sound\" : \"mute\"}.png`} alt=\"sound\" />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default BackgroundMusic;","const GameActionTypes = {\r\n        SET_CARDS: 'SET_CARDS',\r\n        INCREMENT_TURNS: 'INCREMENT_TURNS',\r\n        SET_FIRST_CARD: 'SET_FIRST_CARD',\r\n        SET_SECOND_CARD: 'SET_SECOND_CARD',\r\n        TOGGLE_DISABLED: 'TOGGLE_DISABLED',\r\n        SET_GAME_WON: 'TOGGLE_GAME_WON',\r\n        RESET_TURNS: 'RESET_TURNS'\r\n}\r\n\r\nexport default GameActionTypes;","import './App.scss';\nimport CustomButton from './components/custom-button/custom-button.component';\nimport { useEffect, useState } from \"react\";\nimport cardsArray from './assets/cards.data';\nimport Card from './components/card/card.component';\nimport Victory from './components/victory/victory.component';\nimport BackgroundMusic from './components/background-music/background-music.component';\nimport { connect } from 'react-redux';\nimport { incrementTurns, setCards, setFirstCard, setSecondCard, toggleDisabled, setGameWon, resetTurns } from './redux/game/game.actions';\n\nconst App = ({\n  cards, turns, firstCard, secondCard, disabled, gameWon,\n  setCards, incrementTurns, resetTurns, setFirstCard, setSecondCard, toggleDisabled, setGameWon\n}) => {\n\n  const shuffleCards = () => {\n    setGameWon(false)\n    const shuffledCards = [...cardsArray, ...cardsArray] //duplicate items\n      .sort(() => Math.random() - 0.5)  // negative => switch order, positive => do nothing\n      .map(card => ({ ...card, matched: false, id: Math.random() })) // assign a random id\n\n    setCards(shuffledCards)\n    resetTurns() //everytime we start a new game we call this function and reset turns\n  }\n\n  const handleChoice = (card) => {\n    firstCard ? setSecondCard(card) : setFirstCard(card)\n  }\n\n  //fires when firstCard or secondCard change and when the component mounts\n  useEffect(() => {\n    if (secondCard) {\n      toggleDisabled()\n      if (firstCard.type === secondCard.type) {\n        setCards(prevCards => (\n          prevCards.map(card => (\n            card.type === secondCard.type ? { ...card, matched: true } : card\n          ))\n        ))\n      }\n      setTimeout(() => resetTurn(), 1000)\n    }\n\n    if (secondCard === null) endGame()\n  }, [secondCard])\n\n  //reset chosen cards and increment number of turns\n  const resetTurn = () => {\n    setFirstCard(null)\n    setSecondCard(null)\n    incrementTurns()\n    toggleDisabled()\n  }\n\n  const endGame = () => {\n    if (cards.length > 0) {\n      const gameOver = cards.every((card) => (\n        card.matched === true\n      ))\n      if (gameOver) {\n        setGameWon(true)\n        setCards([])\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"snow layer1 a\"></div>\n      <div className=\"snow layer1\"></div>\n      <h1 className='title'>Memory Game</h1>\n      <CustomButton handleClick={shuffleCards}>New game</CustomButton>\n      <h2 className='subtitle'> Turns: {turns} </h2>\n      {\n        gameWon && <Victory />\n      }\n      <BackgroundMusic url=\"https://play.publicradio.org/web/o/minnesota/classical/programs/free-downloads/2018/10/18/daily_download_20181018_128.mp3\" />\n      <div className='card-container'>\n        {\n          cards.map((card) => (\n            <Card\n              key={card.id}\n              card={card}\n              handleChoice={handleChoice}\n              isFlipped={card === firstCard || card === secondCard || card.matched}\n              disabled={disabled}\n            />\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ game }) => ({\n  cards: game.cards,\n  turns: game.turns,\n  firstCard: game.firstCard,\n  secondCard: game.secondCard,\n  disabled: game.disabled,\n  gameWon: game.gameWon\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setCards: cards => dispatch(setCards(cards)),\n  incrementTurns: () => dispatch(incrementTurns()),\n  setFirstCard: card => dispatch(setFirstCard(card)),\n  setSecondCard: card => dispatch(setSecondCard(card)),\n  toggleDisabled: () => dispatch(toggleDisabled()),\n  setGameWon: () => dispatch(setGameWon()),\n  resetTurns: () => dispatch(resetTurns())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import GameActionTypes from \"./constants\";\r\n\r\nexport const setCards = cards => ({\r\n    type: GameActionTypes.SET_CARDS,\r\n    payload: cards\r\n})\r\n\r\nexport const incrementTurns = () => ({\r\n    type: GameActionTypes.INCREMENT_TURNS\r\n})\r\n\r\nexport const setFirstCard = card => ({\r\n    type: GameActionTypes.SET_FIRST_CARD,\r\n    payload: card\r\n})\r\n\r\nexport const setSecondCard = card => ({\r\n    type: GameActionTypes.SET_SECOND_CARD,\r\n    payload: card\r\n})\r\n\r\nexport const toggleDisabled = () => ({\r\n    type: GameActionTypes.TOGGLE_DISABLED\r\n})\r\n\r\nexport const setGameWon = () => ({\r\n    type: GameActionTypes.SET_GAME_WON\r\n})\r\n\r\nexport const resetTurns = () => ({\r\n    type: GameActionTypes.RESET_TURNS\r\n})","import GameActionTypes from \"./constants\";\r\n\r\nconst INITIAL_STATE = {\r\n    cards: [],\r\n    turns: 0,\r\n    firstCard: null,\r\n    secondCard: null,\r\n    disabled: false,\r\n    gameWon: false\r\n}\r\n\r\nconst gameReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case GameActionTypes.SET_CARDS:\r\n            return {\r\n                ...state,\r\n                cards: action.payload\r\n            }\r\n        case GameActionTypes.INCREMENT_TURNS:\r\n            return {\r\n                ...state,\r\n                turns: state.turns + 1\r\n            }\r\n        case GameActionTypes.SET_FIRST_CARD:\r\n            return {\r\n                ...state,\r\n                firstCard: action.payload\r\n            }\r\n        case GameActionTypes.SET_SECOND_CARD:\r\n            return {\r\n                ...state,\r\n                secondCard: action.payload\r\n            }\r\n        case GameActionTypes.TOGGLE_DISABLED:\r\n            return {\r\n                ...state,\r\n                disabled: !state.disabled\r\n            }\r\n        case GameActionTypes.TOGGLE_GAME_WON:\r\n            return {\r\n                ...state,\r\n                gameWon: !state.gameWon\r\n            }\r\n        case GameActionTypes.TOGGLE_GAME_WON:\r\n            return {\r\n                ...state,\r\n                turns: 0\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default gameReducer;","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"./game/game.reducer\";\r\n\r\nexport default combineReducers({\r\n    game: gameReducer\r\n})","import rootReducer from \"./root-reducer\";\r\nconst { createStore, applyMiddleware } = require(\"redux\");\r\nconst { logger } = require(\"redux-logger\");\r\n\r\nconst middlewares = [logger]\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}